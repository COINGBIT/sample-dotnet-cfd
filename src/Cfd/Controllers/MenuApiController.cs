/*
 * Continous Food Delievery
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Cfd.Attributes;
using Cfd.Models;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace Cfd.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MenuApiController : ControllerBase
    {
        private readonly CfdContext _context;

        public MenuApiController(CfdContext context)
        {
            _context = context;
        }

       // public IEnumerable<MenuItem> Get()
        //    => _context.Set<MenuItem>().Include(e => e.Name).OrderBy(e => e.Price);


        /// <summary>
        /// Create a menu item
        /// </summary>
        /// <remarks>Creates a new item in the menu. Duplicates are allowed</remarks>
        /// <param name="menuItem">Item to add to the store</param>
        /// <response code="201">Null response</response>
        /// <response code="0">unexpected error</response>
        [HttpPost]
        [Route("/CFD/1.0.0/menu")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddMenuItem")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public async Task<ActionResult<MenuItem>> AddMenuItem(MenuItem menuItem)
        {
            try
            {
                _context.MenuItems.Add(menuItem);
                await _context.SaveChangesAsync();
                return CreatedAtAction("AddMenuItem", new { id = menuItem.Id }, menuItem);

            }
            catch (Exception e)
            {
                return BadRequest($"Unable to create: {e.Message}");
            }
        }

        /// <summary>
        /// List all menu items
        /// </summary>
        /// <param name="limit">How many items to return at one time (max 100)</param>
        /// <response code="200">A paged array of menu items</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/CFD/1.0.0/menu")]
        [ValidateModelState]
        [SwaggerOperation("ListMenu")]
        [SwaggerResponse(statusCode: 200, type: typeof(Menu), description: "A paged array of menu items")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public async Task<ActionResult<IEnumerable<MenuItem>>> ListMenu()
        {
            return await _context.MenuItems.ToListAsync();
        }

        /// <summary>
        /// Info for a specific menu item
        /// </summary>
        /// <param name="itemId">The id of the menu item to retrieve</param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/CFD/1.0.0/menu/{itemId}")]
        [ValidateModelState]
        [SwaggerOperation("ShowMenuItemById")]
        [SwaggerResponse(statusCode: 200, type: typeof(MenuItem), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public async Task<ActionResult<MenuItem>> ShowMenuItemById(int itemId)
        {
            var menuItem = await _context.MenuItems.FindAsync(itemId);

            if (menuItem == null)
            {
                return NotFound();
            }

            return menuItem;
        }
    }
}
